services:
  defi-guard-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Use environment variable for EC2 public IP/domain or fallback to localhost for local dev
        VITE_THREAT_INTEL_API_URL: ${EXTERNAL_HOST:-http://localhost}:8000
        VITE_STABLECOIN_MONITOR_API_URL: ${EXTERNAL_HOST:-http://localhost}:8001
        VITE_STABLECOIN_OSINT_API_URL: ${EXTERNAL_HOST:-http://localhost}:8080
        VITE_SANCTION_DETECTOR_API_URL: ${EXTERNAL_HOST:-http://localhost}:3000
        VITE_SCAM_DETECTOR_API_URL: ${EXTERNAL_HOST:-http://localhost}:3001
        VITE_DEFI_RISK_ASSESSMENT_API_URL: ${EXTERNAL_HOST:-http://localhost}:3003
    ports:
      - "3002:80"
    depends_on:
      defi-guard-threat-intel:
        condition: service_healthy
      defi-guard-stablecoin-monitor:
        condition: service_healthy
      sanction-detector:
        condition: service_healthy
      scam-detector:
        condition: service_healthy
      defi-risk-assessment:
        condition: service_healthy
      defi-guard-stablecoin-advanced:
        condition: service_healthy
    environment:
      # These are build-time variables baked into the frontend bundle
      - VITE_THREAT_INTEL_API_URL=${EXTERNAL_HOST:-http://localhost}:8000
      - VITE_STABLECOIN_MONITOR_API_URL=${EXTERNAL_HOST:-http://localhost}:8001
      - VITE_STABLECOIN_OSINT_API_URL=${EXTERNAL_HOST:-http://localhost}:8080
      - VITE_SANCTION_DETECTOR_API_URL=${EXTERNAL_HOST:-http://localhost}:3000
      - VITE_SCAM_DETECTOR_API_URL=${EXTERNAL_HOST:-http://localhost}:3001
      - VITE_DEFI_RISK_ASSESSMENT_API_URL=${EXTERNAL_HOST:-http://localhost}:3003
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - defi-guard-network

  defi-guard-threat-intel:
    image: python:3.11-slim
    command: >
      sh -c "
        apt-get update && 
        apt-get install -y curl git && 
        rm -rf /app &&
        git clone https://github.com/NeerajHazarika/defi-guard-threat-intel-osint.git /app &&
        cd /app && 
        mkdir -p /app/data &&
        pip install -r requirements.txt && 
        python -c 'from app.database.database import create_tables; create_tables()' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:////app/data/threat_intel.db
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - DEBUG=false
      - SCRAPER_DELAY=2
      - MAX_CONCURRENT_REQUESTS=5
      # CORS settings for frontend access
      - CORS_ORIGINS=["*"]
      - ALLOWED_HOSTS=["*"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - defi-guard-network

  defi-guard-stablecoin-monitor:
    image: python:3.9-slim
    command: >
      sh -c "
        apt-get update && 
        apt-get install -y curl git && 
        rm -rf /app &&
        git clone https://github.com/NeerajHazarika/defi-guard-stable-coin-monitor.git /app &&
        cd /app && 
        mkdir -p /app/data &&
        pip install -r requirements.txt && 
        python init_db.py &&
        uvicorn services.stablecoin_monitor.main:app --host 0.0.0.0 --port 8001
      "
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=sqlite:////app/data/stablecoin_monitor.db
      - PEG_CHECK_INTERVAL=60
      - ALERT_THRESHOLD_CRITICAL=0.05
      - ALERT_THRESHOLD_HIGH=0.02
      - ALERT_THRESHOLD_MEDIUM=0.01
      - COINGECKO_RATE_LIMIT=30
      - COINGECKO_API_KEY=${COINGECKO_API_KEY:-}
      - PYTHONPATH=/app
      # CORS settings for frontend access
      - CORS_ORIGINS=["*"]
      - ALLOWED_HOSTS=["*"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - defi-guard-network

  # Stablecoin OSINT Service
  defi-guard-stablecoin-advanced:
    image: python:3.11-slim
    command: >
      sh -c "
        apt-get update && 
        apt-get install -y curl git && 
        if [ ! -f /app/requirements.txt ]; then
          rm -rf /app/* 2>/dev/null || true &&
          git clone https://github.com/NeerajHazarika/defi-guard-stable-coin-adv.git /tmp/advanced &&
          cp -r /tmp/advanced/* /app/ &&
          rm -rf /tmp/advanced
        fi &&
        cd /app && 
        mkdir -p /app/data &&
        pip install -r requirements.txt && 
        uvicorn main:app --host 0.0.0.0 --port 8080
      "
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://stablecoin_user:stablecoin_pass@stablecoin-postgres:5432/stablecoin_adv
      - REDIS_URL=redis://stablecoin-redis:6379
      
      # API Configuration
      - API_SECRET_KEY=your-super-secret-key-change-this-in-production
      - API_ENV=production
      - LOG_LEVEL=info
      
      # Scraping Configuration
      - SCRAPE_INTERVAL_HOURS=6
      - MAX_CONCURRENT_REQUESTS=10
      - REQUEST_DELAY_SECONDS=1
      
      # News & Data Configuration
      - NEWS_SCRAPING_ENABLED=true
      - MAX_NEWS_ARTICLES=1000
      
      # Rate Limiting
      - RATE_LIMIT_PER_MINUTE=100
      - SEARCH_RATE_LIMIT=50
      - ADMIN_RATE_LIMIT=20
      
      # External API Keys (optional)
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY:-}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY:-}
      - MESSARI_API_KEY=${MESSARI_API_KEY:-}
    depends_on:
      stablecoin-postgres:
        condition: service_healthy
      stablecoin-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - stablecoin_advanced_data:/app/data
    networks:
      - defi-guard-network

  # PostgreSQL for Stablecoin OSINT
  stablecoin-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=stablecoin_adv
      - POSTGRES_USER=stablecoin_user
      - POSTGRES_PASSWORD=stablecoin_pass
    volumes:
      - stablecoin_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stablecoin_user -d stablecoin_osint"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - defi-guard-network

  # Redis for Stablecoin OSINT
  stablecoin-redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - stablecoin_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - defi-guard-network

  # Bitcoin Sanction Detector Service
  sanction-detector:
    image: node:18-slim
    command: >
      sh -c "
        apt-get update && 
        apt-get install -y curl && 
        mkdir -p /app &&
        cd /app &&
        npm init -y &&
        npm install express &&
        echo 'const express = require(\"express\");' > index.js &&
        echo 'const app = express();' >> index.js &&
        echo 'const port = process.env.PORT || 3000;' >> index.js &&
        echo '' >> index.js &&
        echo 'app.use(express.json());' >> index.js &&
        echo '' >> index.js &&
        echo 'app.get(\"/health\", (req, res) => {' >> index.js &&
        echo '  res.json({ status: \"ok\", service: \"sanction-detector\", timestamp: new Date().toISOString() });' >> index.js &&
        echo '});' >> index.js &&
        echo '' >> index.js &&
        echo 'app.get(\"/api/health\", (req, res) => {' >> index.js &&
        echo '  res.json({ status: \"ok\", service: \"sanction-detector\", timestamp: new Date().toISOString() });' >> index.js &&
        echo '});' >> index.js &&
        echo '' >> index.js &&
        echo 'app.post(\"/api/screen\", (req, res) => {' >> index.js &&
        echo '  const { address } = req.body;' >> index.js &&
        echo '  res.json({' >> index.js &&
        echo '    address: address || \"unknown\",' >> index.js &&
        echo '    sanctioned: false,' >> index.js &&
        echo '    risk_score: 0,' >> index.js &&
        echo '    message: \"Address not in sanctions list\",' >> index.js &&
        echo '    timestamp: new Date().toISOString()' >> index.js &&
        echo '  });' >> index.js &&
        echo '});' >> index.js &&
        echo '' >> index.js &&
        echo 'app.listen(port, \"0.0.0.0\", () => {' >> index.js &&
        echo '  console.log(\"Sanction detector service running on port \" + port);' >> index.js &&
        echo '});' >> index.js &&
        node index.js
      "
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
    volumes:
      - sanction-data:/app/data
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 3000, path: '/health', timeout: 2000 }; const req = http.get(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.on('timeout', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - defi-guard-network

  # Multi-Chain Scam Address Detector Service
  scam-detector:
    image: node:18-slim
    command: >
      sh -c "
        apt-get update && 
        apt-get install -y curl git wget && 
        rm -rf /app &&
        git clone https://github.com/NeerajHazarika/defi-guard-scam-detector.git /app &&
        cd /app && 
        npm install && 
        PORT=3001 npm start
      "
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CHECKCRYPTOADDRESS_API_KEY=${CHECKCRYPTOADDRESS_API_KEY:-}
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - defi-guard-network

  # DeFi Protocol Risk Assessment Service
  defi-risk-assessment:
    image: node:20-alpine
    working_dir: /tmp/build
    command: >
      sh -c "
        apk add --no-cache git python3 py3-pip gcc musl-dev libffi-dev openssl-dev python3-dev build-base curl py3-virtualenv &&
        git clone https://github.com/Parsh/protocol-risk-assessment.git . &&
        python3 -m venv venv &&
        source venv/bin/activate &&
        pip install --no-cache-dir slither-analyzer==0.10.0 crytic-compile==0.3.6 solc-select==1.0.4 &&
        solc-select install 0.8.19 && solc-select use 0.8.19 &&
        npm install -g typescript ts-node &&
        npm ci &&
        npm install @types/cors @types/node @types/express &&
        echo '{\"compilerOptions\":{\"target\":\"ES2020\",\"module\":\"commonjs\",\"outDir\":\"./dist\",\"strict\":false,\"esModuleInterop\":true,\"skipLibCheck\":true,\"forceConsistentCasingInFileNames\":true,\"types\":[\"node\"],\"moduleResolution\":\"node\"},\"include\":[\"src/**/*\"],\"exclude\":[\"node_modules\",\"dist\"]}' > tsconfig.json &&
        npm run build &&
        mkdir -p /app/data/{protocols,assessments,cache,logs,temp,backups} &&
        mkdir -p /app/data/cache/{etherscan,bscscan,polygonscan,defillama,coingecko,slither} &&
        cp .env.example /app/.env &&
        cp -r dist node_modules package.json /app/ &&
        cd /app &&
        ls -la dist/ &&
        node dist/index.js || node dist/src/index.js
      "
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - API_RATE_LIMIT=100
      - API_RATE_WINDOW=900000
      
      # External API Keys (optional - uses mock data if not provided)
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY:-}
      - BSCSCAN_API_KEY=${BSCSCAN_API_KEY:-}
      - POLYGONSCAN_API_KEY=${POLYGONSCAN_API_KEY:-}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY:-}
      
      # Analysis Configuration
      - SLITHER_TIMEOUT=300000
      - PARALLEL_ANALYSIS=true
      - CACHE_TTL=3600000
      
      # Risk Scoring Configuration (weights must sum to 1.0)
      - TECHNICAL_WEIGHT=0.4
      - GOVERNANCE_WEIGHT=0.25
      - LIQUIDITY_WEIGHT=0.2
      - REPUTATION_WEIGHT=0.15
      
      # Blockchain RPC URLs (optional - uses public RPCs if not provided)
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL:-https://eth.drpc.org}
      - BSC_RPC_URL=${BSC_RPC_URL:-https://bsc-dataseed.binance.org}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL:-https://polygon-rpc.com}
    volumes:
      - defi-risk-data:/app/data
      - defi-risk-logs:/app/logs
      - defi-risk-tmp:/app/tmp
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    networks:
      - defi-guard-network

networks:
  defi-guard-network:
    driver: bridge

volumes:
  sanction-data:
  defi-risk-data:
  defi-risk-logs:
  defi-risk-tmp:
  threat_intel_data:
    driver: local
  stablecoin_monitor_data:
    driver: local
  stablecoin_advanced_data:
    driver: local
  stablecoin_postgres_data:
    driver: local
  stablecoin_redis_data:
    driver: local
